import React, { Component, PropTypes } from 'react';

import store from '../Store.js';
import * as Actions from '../Actions.js';

const buttonStyle = {
  margin: '10px'
};

class Payload extends Component {
  render() {
    console.log("[DEBUG] enter the Payload's render method, props here:", this.props);
    const {payload, onIncrement} = this.props;

    return (
      <div>
        <button style={buttonStyle} onClick={onIncrement}>Save Payload</button>
        <span>Json content: {payload}</span>
      </div>
    );
  }
}

Payload.propTypes = {
  //payload: PropTypes.any.isRequired,
  //onIncrement: PropTypes.func.isRequired,
  //value: PropTypes.number.isRequired
};

/*
 * props:
 * payload: {"options": xxx}
 */
class PayloadContainer extends Component {
  constructor(props) {
    super(props);
    console.log("[DEBUG] enter PayloadContainer, props:", props); // props.payload = {"options":xxxx}

    this.onIncrement = this.onIncrement.bind(this);
    this.onChange = this.onChange.bind(this);
    this.getOwnState = this.getOwnState.bind(this);

    this.state = this.getOwnState();
  }

  // return value suppose:    payload: {"options": xxxx}"
  getOwnState() {
    console.log("[DEBUG] enter payloadContainer, getOwnState(), this.props.payload:", this.props.payload);
    return {
      payload: store.getState()
    };
  }

  onIncrement() {
    console.log("[DEBUG] enter the onIncrement method.");
    store.dispatch(Actions.increment(this.props.payload));
  }

  // state is : "options": {"options": xxxx}
  onChange() {
    console.log("[DEBUG] enter the onChange method.");
    this.setState(this.getOwnState());
  }

//  shouldComponentUpdate(nextProps, nextState) {
//    return (nextProps.caption !== this.props.caption) ||
//      (nextState.value !== this.state.value);
//  }

  componentDidMount() {
    console.log("[DEBUG] enter the componentDidMount method.");
    store.subscribe(this.onChange);
  }

  componentWillUnmount() {
    console.log("[DEBUG] enter the componentWillMount method.");
    store.unsubscribe(this.onChange);
  }

  render() {
    console.log("[DEBUG] enter the PayloadContainer's render method, the props:", this.props);
    return (
        <Payload payload={this.props.payload}
      onIncrement={this.onIncrement}
      />
    );
  }
}

PayloadContainer.propTypes = {
  //caption: PropTypes.string.isRequired
};

export default PayloadContainer;

